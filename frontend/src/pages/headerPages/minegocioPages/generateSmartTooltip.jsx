export const generateSmartTooltip = (details) => {
  const metrics = Object.values(details);
  const buenos = metrics.filter(m => m.rating === "Bueno").length;
  const regulares = metrics.filter(m => m.rating === "Regular").length;
  const malos = metrics.filter(m => m.rating === "Malo").length;
  
  // Traducir nombres de m√©tricas a espa√±ol
  const traducirMetrica = (metric) => {
    const traducciones = {
      'RazonDeLiquidez': 'Liquidez',
      'CapitalDeTrabajo': 'Capital de trabajo',
      'RazonDeEndeudamiento': 'Endeudamiento',
      'DeudaDePatrimonio': 'Deuda/Patrimonio',
      'RotacionDeInventario': 'Rotaci√≥n inventario',
      'RotacionCuentasPorCobrar': 'Rotaci√≥n cuentas',
      'RotacionDeActivos': 'Rotaci√≥n activos',
      'MargenNeto': 'Margen neto',
      'RendimientoSobreActivos': 'Rendimiento activos',
      'RendimientoSobrePatrimonio': 'Rendimiento patrimonio'
    };
    return traducciones[metric] || metric;
  };

  // Detectar fortalezas (solo "Bueno")
  const metricasBuenas = metrics
    .filter(m => m.rating === "Bueno")
    .map(m => traducirMetrica(m.metric));

  // M√©tricas regulares
  const metricasRegulares = metrics
    .filter(m => m.rating === "Regular")
    .map(m => traducirMetrica(m.metric));

  // M√©tricas cr√≠ticas
  const metricasCriticas = metrics
    .filter(m => m.rating === "Malo")
    .map(m => traducirMetrica(m.metric));

  return (
    <span className="info-tooltip-text">
      <strong>üìä Resumen del An√°lisis</strong><br/>
      ‚Ä¢ {buenos} √≥ptimos ‚úÖ<br/>
      {regulares > 0 && <>‚Ä¢ {regulares} regulares ‚ö†Ô∏è<br/></>}
      ‚Ä¢ {malos} por mejorar ‚ùå<br/>
      <br/>
      
     {metricasBuenas.length > 0 && (
  <>
    <strong>Fortalezas:</strong><br/>
    {metricasBuenas.map((metrica, index) => (
      <div key={index}>‚Ä¢ {metrica}</div>
    ))}
    <br/>
  </>
)}

{metricasRegulares.length > 0 && (
  <>
    <strong>En observaci√≥n:</strong><br/>
    {metricasRegulares.map((metrica, index) => (
      <div key={index}>‚Ä¢ {metrica}</div>
    ))}
    <br/>
  </>
)}

{metricasCriticas.length > 0 && (
  <>
    <strong>√Åreas cr√≠ticas:</strong><br/>
    {metricasCriticas.map((metrica, index) => (
      <div key={index}>‚Ä¢ {metrica}</div>
    ))}
  </>
)}
    </span>
  );
};